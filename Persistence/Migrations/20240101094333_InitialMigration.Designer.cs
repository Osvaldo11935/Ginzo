// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240101094333_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassSchedule", b =>
                {
                    b.Property<string>("ClassesId")
                        .HasColumnType("text");

                    b.Property<string>("SchedulesId")
                        .HasColumnType("text");

                    b.HasKey("ClassesId", "SchedulesId");

                    b.HasIndex("SchedulesId");

                    b.ToTable("ClassSchedule");
                });

            modelBuilder.Entity("Domain.Entities.AcademicLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AcademicLevel");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Complement")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicLevelId")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("text");

                    b.Property<string>("SchoolYearId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Domain.Entities.Discipline", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("Domain.Entities.DisciplineCourse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisciplineId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsKey")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("DisciplineCourse");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnrollmentParameterId")
                        .HasColumnType("text");

                    b.Property<string>("EnrollmentStatusId")
                        .HasColumnType("text");

                    b.Property<double>("FinalAverage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentParameterId");

                    b.HasIndex("EnrollmentStatusId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentCourse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstOption")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollmentCourse");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentCourseDiscipline", b =>
                {
                    b.Property<string>("DisciplineId")
                        .HasColumnType("text");

                    b.Property<string>("EnrollmentCourseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FinalAverage")
                        .HasColumnType("double precision");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DisciplineId", "EnrollmentCourseId");

                    b.HasIndex("EnrollmentCourseId");

                    b.ToTable("EnrollmentCourseDiscipline");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FinalAverage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPriorityAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinPriorityAge")
                        .HasColumnType("integer");

                    b.Property<string>("SchoolYearId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("EnrollmentParameter");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("EnrollmentStatus");

                    b.HasData(
                        new
                        {
                            Id = "30963a2f-adbd-41e4-ae25-c3e9c5774c3d",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6910),
                            Description = "Aprovado",
                            IsActive = true,
                            Status = "Aprovado",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6934)
                        },
                        new
                        {
                            Id = "47ecebc6-5682-45c1-8ec4-b5b8cc1da0e1",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6942),
                            Description = "Reprovado",
                            IsActive = true,
                            Status = "Reprovado",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6943)
                        },
                        new
                        {
                            Id = "7395136a-692d-4d60-a2b3-80c1967ba6f7",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6948),
                            Description = "Anulado",
                            IsActive = true,
                            Status = "Anulado",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6949)
                        },
                        new
                        {
                            Id = "fbe16f4c-bd17-4889-b027-a70a2dcdae42",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6954),
                            Description = "Em analise",
                            IsActive = true,
                            Status = "Em analise",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6955)
                        },
                        new
                        {
                            Id = "81a9dcce-3aaf-4a56-b429-73854eb25cf2",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6959),
                            Description = "Pre-Aprovado",
                            IsActive = true,
                            Status = "Pre-Aprovado",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 43, 30, 772, DateTimeKind.Local).AddTicks(6960)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DocumentExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DocumentIssuanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Father")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Mother")
                        .HasColumnType("text");

                    b.Property<string>("Natural")
                        .HasColumnType("text");

                    b.Property<string>("PlaceIssuanceDocument")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalData");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "30963a2f-adbd-41e4-ae25-c3e9c5774c3d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "47ecebc6-5682-45c1-8ec4-b5b8cc1da0e1",
                            Name = "Aluno",
                            NormalizedName = "ALUNO"
                        },
                        new
                        {
                            Id = "7395136a-692d-4d60-a2b3-80c1967ba6f7",
                            Name = "Professor(a)",
                            NormalizedName = "PROFESSOR(A)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DayWeek")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolYearId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Domain.Entities.SchoolYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClassId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProcessNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VacancyCourse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CourseId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnrollmentParameterId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalVacancy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("EnrollmentParameterId");

                    b.ToTable("VacancyCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClassSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entities.Address", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.HasOne("Domain.Entities.AcademicLevel", "AcademicLevel")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicLevelId");

                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");

                    b.HasOne("Domain.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.HasOne("Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("AcademicLevel");

                    b.Navigation("Course");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("Domain.Entities.DisciplineCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("DisciplineCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Domain.Entities.Discipline", "Discipline")
                        .WithMany("DisciplineCourses")
                        .HasForeignKey("DisciplineId");

                    b.Navigation("Course");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("Domain.Entities.EnrollmentParameter", "EnrollmentParameter")
                        .WithMany("Enrollments")
                        .HasForeignKey("EnrollmentParameterId");

                    b.HasOne("Domain.Entities.EnrollmentStatus", "EnrollmentStatus")
                        .WithMany("Enrollments")
                        .HasForeignKey("EnrollmentStatusId");

                    b.HasOne("Domain.Entities.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId");

                    b.Navigation("EnrollmentParameter");

                    b.Navigation("EnrollmentStatus");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("EnrollmentCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Domain.Entities.Enrollment", "Enrollment")
                        .WithMany("EnrollmentCourses")
                        .HasForeignKey("EnrollmentId");

                    b.Navigation("Course");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentCourseDiscipline", b =>
                {
                    b.HasOne("Domain.Entities.Discipline", "Discipline")
                        .WithMany("EnrollmentCourseDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EnrollmentCourse", "EnrollmentCourse")
                        .WithMany("EnrollmentCourseDisciplines")
                        .HasForeignKey("EnrollmentCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("EnrollmentCourse");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentParameter", b =>
                {
                    b.HasOne("Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany("EnrollmentParameters")
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("Domain.Entities.PersonalData", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("PersonalData")
                        .HasForeignKey("Domain.Entities.PersonalData", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Schedules")
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.VacancyCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithOne("VacancyCourse")
                        .HasForeignKey("Domain.Entities.VacancyCourse", "CourseId");

                    b.HasOne("Domain.Entities.EnrollmentParameter", "EnrollmentParameter")
                        .WithMany("VacancyCourses")
                        .HasForeignKey("EnrollmentParameterId");

                    b.Navigation("Course");

                    b.Navigation("EnrollmentParameter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AcademicLevel", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("DisciplineCourses");

                    b.Navigation("EnrollmentCourses");

                    b.Navigation("VacancyCourse");
                });

            modelBuilder.Entity("Domain.Entities.Discipline", b =>
                {
                    b.Navigation("DisciplineCourses");

                    b.Navigation("EnrollmentCourseDisciplines");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Navigation("EnrollmentCourses");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentCourse", b =>
                {
                    b.Navigation("EnrollmentCourseDisciplines");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentParameter", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("VacancyCourses");
                });

            modelBuilder.Entity("Domain.Entities.EnrollmentStatus", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.SchoolYear", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("EnrollmentParameters");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Enrollments");

                    b.Navigation("PersonalData");

                    b.Navigation("Students");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
